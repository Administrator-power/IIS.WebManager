name: $(Build.SourceBranch)-$(Build.BuildID)
variables:
  TeamName: IISAdmin
  MajorVersion: 0
  MinorVersion: 1
  NuGetVersionSimple: $(MajorVersion).$(MinorVersion).$(Build.BuildID)
  NuGetVersionFull: $(MajorVersion).$(MinorVersion).$(Build.BuildID)-$(Build.SourceBranchName)
  SignType: 'test'
  SigningIdentity: 400

trigger:
  branches:
    include:
      - dev
      - master
      - preview/*
      - releases/*
pr:
  autoCancel: false
  branches:
    include:
      - dev
      - master
      - preview/*
      - releases/*
jobs:
- job: build
  pool:
    name: 'Hosted VS2017'  # name of the pool to run this job in
    demands: 
      - msbuild
      - visualstudio
      - vstest

  steps:
  - checkout: self  
    clean: false
    submodules: true  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules

  - task: MicroBuildSigningPlugin@2
    inputs:
      signType: $(SignType)
      feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'

  - task: NodeTool@0
    inputs:
      versionSpec: 8.15.0

  - task: NuGetToolInstaller@0
    displayName: 'Install Nuget tool'

  - task: Npm@1
    displayName: 'npm install'
    inputs:
      workingDir: src
      verbose: true

  - task: PowerShell@2
    displayName: 'PowerShell Script build.ps1'
    inputs:
      targetType: filePath
      filePath: ./build.ps1
      arguments: '--configuration=wac --output-hashing all'

  - task: NuGetCommand@2
    displayName: 'NuGet pack (development)'
    condition: not(or(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'), endsWith(variables['Build.SourceBranch'], 'signing')))
    inputs:
      command: pack
      packagesToPack: '$(Build.SourcesDirectory)/**/*.nuspec'
      versioningScheme: byEnvVar
      versionEnvVar: NuGetVersionFull

  - task: NuGetCommand@2
    displayName: 'NuGet pack (release)'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'), endsWith(variables['Build.SourceBranch'], 'signing'))
    inputs:
      command: pack
      packagesToPack: '$(Build.SourcesDirectory)/**/*.nuspec'
      versioningScheme: byEnvVar
      versionEnvVar: NuGetVersionSimple
      packDestination: $(Build.SourcesDirectory)/signing/dist

  - task: NuGetCommand@2
    displayName: 'NuGet push'
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/preview'), startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'))
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: 'IIS-WAC-MyGet'
      allowPackageConflicts: false

  - task: NuGetCommand@2
    displayName: 'Restore signing project'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'), endsWith(variables['Build.SourceBranch'], 'signing'))
    inputs:
      command: 'restore'
      restoreSolution: signing\signing.csproj

  - task: VSBuild@1
    displayName: 'Build Signing project'
    condition: or(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'), endsWith(variables['Build.SourceBranch'], 'signing'))
    inputs:
      solution: signing\signing.csproj
      msbuildArchitecture: x64
      configuration: 'release'
      msbuildArgs: /p:SignType=$(SignType) /p:SigningIdentity=$(SigningIdentity) /p:ManifestDir=$(Build.SourcesDirectory)/signing/dist
